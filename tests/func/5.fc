{-

TASK 5 - SHARED WALLET.

The aim of two owner wallet is to create smart-contract which send messages then and only then both owners (represented by public keys) authorized it.

TL-B schema of external message body accepted by wallet is as follows:
```
request#_ valid_until:uint32 mode:uint8 msg_to_send:^Cell = Request;
msg_body#_ public_key:uint256 signature:(512 * Bit) request:^Request = MsgBody;
```

Where `signature` signs `Request` cell with some private key and `public_key` is corresponding public key.

`msg_to_send` is fully formed message which is ready to be accepted by `send_raw_message()`.

Any errors related to the incorrect `msg_to_send` may be ignored (in other words if something goes wrong due to owner's malformed message, it is owner's problem).

When wallet receive request signed by one owner it should store it in storage.

When wallet receives the same request signed by another owner it should process request, that means send `msg_to_send` with `mode` in the same transaction it got second signature.

If message body does not corresponds to `MsgBody` type described above, request is signed not by owner, contains incorrect signature or current time is higher than `valid_until`, request should be ignored (message should not be accepted). Note: absence of `accept_message` and throwing (with exit_code > 1) before `accept_message` are the same for external messages (since will result in ignoring that external message by any validator).

If the same request (regardless approved by one or both owners) is sent the second time it should be ignored.

It is acceptable to ignore requests which are valid for more than 1 minute as well as not accept more than 10 requests per minute.

Before running tests, storage for contract will be generated by `pack_data` with providing two public keys. Thus participants may intoduce their own storage layout.

-}


() recv_internal() {

}

;; testable
cell pack_data(int public_key1, int public_key2) impure method_id {
    ;; Fill in

    return begin_cell()
            .store_uint(public_key1, 256)
            .store_uint(public_key2, 256)
            .store_dict(new_dict())
            .store_dict(new_dict())
            .end_cell();
}

(int, cell, cell) check_write_signature(cell dr, cell dwr, int key, slice rqs) impure inline_ref {

    (_, int rtry) = dr.udict_get?(256, key);
    (_, int wtry) = dwr.udict_get?(256, key);

    throw_if(74, rtry & wtry); ;;replay message

    throw_if(75, wtry); ;;replay rqs from same owner

    int res = 0;
    dwr~udict_set(256, key, rqs);  ;; make record of request into contract's storage dict

    if(rtry ^ wtry) {         ;; got request from second owner
        res = -1;
    }
            elseif (~ (rtry & wtry)) {  ;; got request from first owner
                res = 1;
            }
    return (res, dr, dwr);
}

;; testable
;;         request#_ valid_until:uint32 mode:uint8 msg_to_send:^Cell = Request;
;;         msg_body#_ public_key:uint256 signature:(512 * Bit) request:^Request = MsgBody;
() recv_external (slice in_msg_body) impure {

    int incpbk = in_msg_body~load_uint(256);
    int fl = 0; ;; flag for check owner
    int ss = 0; ;; flag for action switch
    slice signature = in_msg_body~load_bits(512);

    var ds = get_data().begin_parse();
    int pbk_1 = ds~load_uint(256);
    int pbk_2 = ds~load_uint(256);

    if     (incpbk == pbk_1) {
        fl = 1;
    }
            elseif (incpbk == pbk_2) {
                fl = 2;
            }
    throw_if(77, fl == 0 ); ;; wtrong public key

    cell d1 = ds~load_dict(); ;; read dict of owner-1 requests
    cell d2 = ds~load_dict(); ;; read dict of owner-2 requests

    cell rq = in_msg_body~load_ref();
    int hash = cell_hash(rq);
    slice rqs = rq.begin_parse();
    int rhsh = slice_hash(rqs);
    int valid_until = rqs.preload_uint(32);

    throw_if(56, valid_until <= now());
    throw_unless(33, check_signature(rhsh, signature, incpbk));

    if (fl == 1) {
        (ss, d1, d2) = check_write_signature(d1, d2, rhsh, rqs);
    }
            elseif (fl == 2) {
                (ss, d2, d1) = check_write_signature(d2, d1, rhsh, rqs);
            }

    throw_if(99, ss == 0); ;; something impossible happened!

    ;;  HERE WE SPENT GAS
    accept_message();

    if (ss == -1)
            {
                rqs~skip_bits(32);
                int mode = rqs~load_uint(8);
                cell msg_to_send = rqs~load_ref();
                send_raw_message(msg_to_send, mode);
            }
    ;; ss == 1 just writing to contract updated dicts
    set_data(begin_cell()
            .store_uint(pbk_1,256)
            .store_uint(pbk_2, 256)
            .store_dict(d1)
            .store_dict(d2)
            .end_cell()
    );
}
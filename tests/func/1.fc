{-

TASK 1 - COUNTER.

Let's start.

This simple counter smart contract stores a `total` - 64-bit unsigned integer in its data (it is guaranteed that storage data contains `total`).

When receiving an internal incoming message, contract takes a 32-bit unsigned integer from message body, adds it to the `total` and saves the result in contract data.

Get-method `get_total` should returns actual `total` value stored in contract data.

If the body of the incoming message is less than 32 bits then it should throw ANY error.

-}
;; testable

() recv_internal(slice in_msg_body) impure {
    throw_if(33, in_msg_body.slice_bits() < 32);

    (_, int n) = in_msg_body.load_uint(32);
    slice ds = get_data().begin_parse();
    (_,int total) = ds.load_uint(64);
    total += n;
    set_data(begin_cell().store_uint(total, 64).end_cell());
}

;; testable
int get_total() method_id {
    slice ds = get_data().begin_parse();
    return ds~load_uint(64);

}